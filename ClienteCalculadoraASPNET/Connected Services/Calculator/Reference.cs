//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ClienteCalculadoraASPNET.Calculator {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Calculator.ICalculatorWCF")]
    public interface ICalculatorWCF {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Suma", ReplyAction="http://tempuri.org/ICalculatorWCF/SumaResponse")]
        double Suma(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Suma", ReplyAction="http://tempuri.org/ICalculatorWCF/SumaResponse")]
        System.Threading.Tasks.Task<double> SumaAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Resta", ReplyAction="http://tempuri.org/ICalculatorWCF/RestaResponse")]
        double Resta(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Resta", ReplyAction="http://tempuri.org/ICalculatorWCF/RestaResponse")]
        System.Threading.Tasks.Task<double> RestaAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Multiplicacion", ReplyAction="http://tempuri.org/ICalculatorWCF/MultiplicacionResponse")]
        double Multiplicacion(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Multiplicacion", ReplyAction="http://tempuri.org/ICalculatorWCF/MultiplicacionResponse")]
        System.Threading.Tasks.Task<double> MultiplicacionAsync(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Division", ReplyAction="http://tempuri.org/ICalculatorWCF/DivisionResponse")]
        double Division(double n1, double n2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculatorWCF/Division", ReplyAction="http://tempuri.org/ICalculatorWCF/DivisionResponse")]
        System.Threading.Tasks.Task<double> DivisionAsync(double n1, double n2);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorWCFChannel : ClienteCalculadoraASPNET.Calculator.ICalculatorWCF, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorWCFClient : System.ServiceModel.ClientBase<ClienteCalculadoraASPNET.Calculator.ICalculatorWCF>, ClienteCalculadoraASPNET.Calculator.ICalculatorWCF {
        
        public CalculatorWCFClient() {
        }
        
        public CalculatorWCFClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorWCFClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorWCFClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorWCFClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Suma(double n1, double n2) {
            return base.Channel.Suma(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> SumaAsync(double n1, double n2) {
            return base.Channel.SumaAsync(n1, n2);
        }
        
        public double Resta(double n1, double n2) {
            return base.Channel.Resta(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> RestaAsync(double n1, double n2) {
            return base.Channel.RestaAsync(n1, n2);
        }
        
        public double Multiplicacion(double n1, double n2) {
            return base.Channel.Multiplicacion(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> MultiplicacionAsync(double n1, double n2) {
            return base.Channel.MultiplicacionAsync(n1, n2);
        }
        
        public double Division(double n1, double n2) {
            return base.Channel.Division(n1, n2);
        }
        
        public System.Threading.Tasks.Task<double> DivisionAsync(double n1, double n2) {
            return base.Channel.DivisionAsync(n1, n2);
        }
    }
}
